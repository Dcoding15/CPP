Encapsulation: Process of grouping data members and methods into a single unit. To allow accessing those restricted data and methods, we have to declare public methods.
Fully Encapsulated: Hinding all internal data members and methods within a class.

[ class name ]
{
	private: // Bydefault it is private
	// Encapsulated statement

	public:
	// statement to access encapsulated statement, if required	
};


Abstraction: Displaying only essential information and hiding background details and implementation.

[ class name ]
{
	private:
	// Hiding implementation
	
	public:
	// getter and setter
};


Inheritence: A mechanism that allow derived class to inherit properties (data members or methods) from base class.

// Parent class
[ class name ]
{
	public:
	// statement
}

// Child class
[ class name ] : [ modifier ] [ parent class name ]
{
	// statement
};

Type of inheritence: -
	1. Single Inheritence: One child class inherit properties from only one parent class.
		Example: -
			class A
			{
				void fun(){
					std::cout<<"This is class A"<<std::endl;
				}
			};
			class B: public A
			{
				void fun(){
					std::cout<<"This is class B"<<std::endl;
				}
			};
	2. Multilevel Inheritence: Its is a chain of single inheritence.
		Example: -
			class A
			{
				public:
				void fun(){
					std::cout<<"This is class A"<<std::endl;
				}
			};
			class B: public A
			{
				public:
				void fun(){
					std::cout<<"This is class B"<<std::endl;
				}
			};
			class C: public B
			{
				public:
				void fun(){
					std::cout<<"This is class C"<<std::endl;
				}
			};
			class D: public C
			{
				public:
				void fun(){
					std::cout<<"This is class D"<<std::endl;
				}
			};
	3. Multiple Inheritence: One child class inherit properties from many parent class.
		Example: -
			class A
			{
				public:
				void fun(){
					std::cout<<"This is class A"<<std::endl;
				}
			};
			class B
			{
				public:
				void fun(){
					std::cout<<"This is class B"<<std::endl;
				}
			};
			class C
			{
				public:
				void fun(){
					std::cout<<"This is class C"<<std::endl;
				}
			};
			class D: public A, public B, public C
			{
				public:
				void fun(){
					std::cout<<"This is class D"<<std::endl;
				}
			};

	4. Hirarchical Inheritence: Many child class inherit properties from one parent class.
		Example: -
			class A
			{
				public:
				void fun(){
					std::cout<<"This is class A"<<std::endl;
				}
			};
			class B: public A
			{
				public:
				void fun(){
					std::cout<<"This is class B"<<std::endl;
				}
			};
			class C: public A
			{
				public:
				void fun(){
					std::cout<<"This is class C"<<std::endl;
				}
			};
			class D: public A
			{
				public:
				void fun(){
					std::cout<<"This is class D"<<std::endl;
				}
			};

	5. Hybrid Inheritence: It is a combination of more than one type of inheritence.

Mode of Inheritence: -
1. Public Mode (Derived Class): -
		Base Class			--->	Derived Class
		----------					-------------
		Public				---> 	Public
		Protected		 	---> 	Protected
		Private				--->	Can't Accessed
1. Protected Mode (Derived Class): -
		Base Class			--->	Derived Class
		----------					-------------
		Public				---> 	Protected
		Protected		 	---> 	Protected
		Private				--->	Can't Accessed
1. Private Mode (Derived Class): -
		Base Class			--->	Derived Class
		----------					-------------
		Public				---> 	Private
		Protected		 	---> 	Private
		Private				--->	Can't Accessed

Ambiguity in Inheritence: If a derived class inherit a property of same name from different base class, then compiler is not clear which base class property should have be invoked. To avoid these type of ambiguity we use scope resolution operator.	Syntax for calling: [ derived class object ].[ base class object ]::[ data members and methods ];

Polymorphism: 'Poly' means 'many' and 'morphism' means 'forms'. It is an ability to display an entity into many forms thourgh same interface.

Types of polymorphism: -
	1. Compile Time polymorphism / Static Binding / Early Binding
		(i) Method Overloading: Methods having same name and different parameters, these methods are overloaded.
		(ii) Operator Overloading	
	2. Run Time polymorphism / Dynamic Binding / Late Binding

Note: -
	1. Derived class -> Sub class / Child class (Class whose properties are interited to another class)
	2. Base class -> Super class / Parent class (Class whose properties are interited from another class)